// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Styled(Header)
    virtual={undefined}
>
    <Styled(Body)
        virtual={undefined}
    >
        <Styled(Title)
            virtual={undefined}
        >
            Daily Inspiration
        </Styled(Title)>
    </Styled(Body)>
    <Styled(Right)
        virtual={undefined}
    >
        <Styled(Title)
            onPress={[Function]}
            virtual={undefined}
        >
            About
        </Styled(Title)>
    </Styled(Right)>
</Styled(Header)>,
  "nodes": Array [
    <Styled(Header)
      virtual={undefined}
>
      <Styled(Body)
            virtual={undefined}
      >
            <Styled(Title)
                  virtual={undefined}
            >
                  Daily Inspiration
            </Styled(Title)>
      </Styled(Body)>
      <Styled(Right)
            virtual={undefined}
      >
            <Styled(Title)
                  onPress={[Function]}
                  virtual={undefined}
            >
                  About
            </Styled(Title)>
      </Styled(Right)>
</Styled(Header)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Headernih />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Headernih {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Styled(Header)
          virtual={undefined}
>
          <Styled(Body)
                    virtual={undefined}
          >
                    <Styled(Title)
                              virtual={undefined}
                    >
                              Daily Inspiration
                    </Styled(Title)>
          </Styled(Body)>
          <Styled(Right)
                    virtual={undefined}
          >
                    <Styled(Title)
                              onPress={[Function]}
                              virtual={undefined}
                    >
                              About
                    </Styled(Title)>
          </Styled(Right)>
</Styled(Header)>,
        "_debugID": 2,
        "_renderedOutput": <Styled(Header)
          virtual={undefined}
>
          <Styled(Body)
                    virtual={undefined}
          >
                    <Styled(Title)
                              virtual={undefined}
                    >
                              Daily Inspiration
                    </Styled(Title)>
          </Styled(Body)>
          <Styled(Right)
                    virtual={undefined}
          >
                    <Styled(Title)
                              onPress={[Function]}
                              virtual={undefined}
                    >
                              About
                    </Styled(Title)>
          </Styled(Right)>
</Styled(Header)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Headernih />,
}
`;
